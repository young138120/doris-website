"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["531208"],{878084:function(e,n,o){o.r(n),o.d(n,{metadata:()=>t,contentTitle:()=>r,default:()=>u,assets:()=>c,toc:()=>l,frontMatter:()=>s});var t=JSON.parse('{"id":"install/cluster-deployment/k8s-deploy/compute-storage-decoupled/config-ms","title":"Config Metaservice","description":"\x3c!--","source":"@site/versioned_docs/version-3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/config-ms.md","sourceDirName":"install/cluster-deployment/k8s-deploy/compute-storage-decoupled","slug":"/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/config-ms","permalink":"/docs/3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/config-ms","draft":false,"unlisted":false,"tags":[],"version":"3.0","frontMatter":{"title":"Config Metaservice","language":"en"},"sidebar":"docs","previous":{"title":"Install FoundationDB","permalink":"/docs/3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/install-fdb"},"next":{"title":"Config FE","permalink":"/docs/3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/config-fe"}}'),i=o("785893"),a=o("250065");let s={title:"Config Metaservice",language:"en"},r=void 0,c={},l=[{value:"Image configuration",id:"image-configuration",level:2},{value:"Resource configuration",id:"resource-configuration",level:2},{value:"FoundationDB access configuration",id:"foundationdb-access-configuration",level:2},{value:"Custom startup configuration",id:"custom-startup-configuration",level:2}];function d(e){let n={a:"a",br:"br",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"MetaService is a component of Doris designed for the separation of storage and computation, providing metadata management and query services. The MetaService is a stateless service, typically deployed in a high-availability master-slave configuration. This document provides detailed instructions for configuring MetaService within a DorisDisaggregatedCluster."}),"\n",(0,i.jsx)(n.h2,{id:"image-configuration",children:"Image configuration"}),"\n",(0,i.jsx)(n.p,{children:"In the provided deployment example, the configured MetaService image may not be the latest version. When using a custom image, configure it as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    image: ${msImage}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ${msImage} refers to the image of MetaService that you wish to deploy. The official ",(0,i.jsx)(n.a,{href:"https://hub.docker.com/repository/docker/selectdb/doris.ms-ubuntu/general",children:"MetaService image"})," is available on DockerHub."]}),"\n",(0,i.jsx)(n.h2,{id:"resource-configuration",children:"Resource configuration"}),"\n",(0,i.jsx)(n.p,{children:"To limit the resources available to MetaService to 4 CPU cores and 4 Gi of memory, use the following configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    requests:\n      cpu: 4\n      memory: 4Gi\n    limits:\n      cpu: 4\n      memory: 4Gi\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Update the configuration in the required ",(0,i.jsx)(n.a,{href:"/docs/3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/install-quickstart#step-3-deploy-the-compute-storage-decoupled-cluster",children:"DorisDisaggregatedCluster resource"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"foundationdb-access-configuration",children:"FoundationDB access configuration"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Configure the ConfigMap with FoundationDB access information",(0,i.jsx)(n.br,{}),"\nThe FoundationDB cluster is deployed using the fdb-kubernetes-operator. You can directly configure the ConfigMap generated by the fdb-kubernetes-operator to include the FoundationDB access information. The configuration is as follows:\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    image: {msImage}\n    fdb:\n      configMapNamespaceName:\n        name: {foundationdbConfigmap}\n        namespace: {namespace}\n"})}),"\nHere, ${foundationdbConfigMapName} is the name of the ConfigMap, and ${namespace} is the namespace where FoundationDB is deployed. For details on locating the ConfigMap with FoundationDB access information, refer to the section on ",(0,i.jsx)(n.a,{href:"/docs/3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/install-fdb#retrieve-the-configmap-containing-foundationdb-access-information",children:"Retrieving the ConfigMap with FoundationDB access information"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Configure the FoundationDB access endpoint",(0,i.jsx)(n.br,{}),"\nIf FoundationDB is deployed on physical machines, you can directly configure the access endpoint in MetaService as follows:\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    fdb:\n      address: ${fdbEndpoint}\n"})}),"\n${fdbEndpoint} refers to the access address of FoundationDB. For physical deployments, refer to the FoundationDB documentation on ",(0,i.jsx)(n.a,{href:"https://apple.github.io/foundationdb/administration.html#foundationdb-cluster-file",children:"cluster-file"})," for details on how to retrieve the access information."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"custom-startup-configuration",children:"Custom startup configuration"}),"\n",(0,i.jsx)(n.p,{children:"In Kubernetes, configuration files can be mounted via ConfigMap. You can customize the startup configuration of the Doris storage-computation separation component through a ConfigMap. When customizing the startup configuration, Doris Operator automatically handles the configuration required for mutual awareness between components. As a result, when customizing the MetaService startup configuration, there is no need to include FoundationDB-related configurations."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a Custom ConfigMap with Startup Configuration.",(0,i.jsx)(n.br,{}),"\nThe following is an example of a custom ConfigMap that includes startup configuration:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\ndata:\n  doris_cloud.conf: |\n    # // meta_service\n    brpc_listen_port = 5000\n    brpc_num_threads = -1\n    brpc_idle_timeout_sec = 30\n    http_token = greedisgood9999\n\n    # // doris txn config\n    label_keep_max_second = 259200\n    expired_txn_scan_key_nums = 1000\n\n    # // logging\n    log_dir = ./log/\n    # info warn error\n    log_level = info\n    log_size_mb = 1024\n    log_filenum_quota = 10\n    log_immediate_flush = false\n    # log_verbose_modules = *\n\n    # //max stage num\n    max_num_stages = 40\nkind: ConfigMap\nmetadata:\n  name: doris-metaservice\n  namespace: default\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Update the DorisDisaggregatedCluster Resource."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"spec:\n  metaService:\n    image: {msImage}\n    configMaps:\n      - name: doris-metaservice\n        mountPath: /etc/doris\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, the ",(0,i.jsx)(n.code,{children:"doris-metaservice"})," ConfigMap is used. Update the ",(0,i.jsx)(n.a,{href:"/docs/3.0/install/cluster-deployment/k8s-deploy/compute-storage-decoupled/install-quickstart#step-3-deploy-the-compute-storage-decoupled-cluster",children:"DorisDisaggregatedCluster resource"}),". The MetaService service uses the doris_cloud.conf file for its startup configuration, and the corresponding key in the ConfigMap must be doris_cloud.conf. The mount path for the ConfigMap must be /etc/doris."]})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},250065:function(e,n,o){o.d(n,{Z:function(){return r},a:function(){return s}});var t=o(667294);let i={},a=t.createContext(i);function s(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);