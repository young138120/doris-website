"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["624425"],{958153:function(e,n,t){t.r(n),t.d(n,{metadata:()=>s,contentTitle:()=>a,default:()=>p,assets:()=>c,toc:()=>d,frontMatter:()=>l});var s=JSON.parse('{"id":"sql-manual/sql-functions/string-functions/split-by-regexp","title":"SPLIT_BY_REGEXP","description":"\x3c!--","source":"@site/docs/sql-manual/sql-functions/string-functions/split-by-regexp.md","sourceDirName":"sql-manual/sql-functions/string-functions","slug":"/sql-manual/sql-functions/string-functions/split-by-regexp","permalink":"/docs/dev/sql-manual/sql-functions/string-functions/split-by-regexp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SPLIT_BY_REGEXP","language":"en"},"sidebar":"docs","previous":{"title":"SPLIT_BY_STRING","permalink":"/docs/dev/sql-manual/sql-functions/string-functions/split-by-string"},"next":{"title":"SUBSTRING_INDEX","permalink":"/docs/dev/sql-manual/sql-functions/string-functions/substring-index"}}'),i=t("785893"),r=t("250065");let l={title:"SPLIT_BY_REGEXP",language:"en"},a=void 0,c={},d=[{value:"split_by_regexp",id:"split_by_regexp",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Arguments",id:"arguments",level:4},{value:"example",id:"example",level:3},{value:"keywords",id:"keywords",level:3}];function o(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"split_by_regexp",children:"split_by_regexp"}),"\n",(0,i.jsx)(n.h3,{id:"description",children:"description"}),"\n",(0,i.jsx)(n.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"ARRAY<STRING> split_by_regexp(STRING str, STRING pattern[, int max_limit])"})}),"\n",(0,i.jsx)(n.p,{children:"Split the string 'str' based on the input regular expression 'pattern', with the option to retain up to the maximum number 'max_imit'. By default, all strings will be retained, and a split string array will be returned."}),"\n",(0,i.jsx)(n.h4,{id:"arguments",children:"Arguments"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Str "})," - The string that needs to be split Type: ",(0,i.jsx)(n.code,{children:"String"}),"\n",(0,i.jsx)(n.code,{children:"Pattern "}),"- Regular expression Type: ",(0,i.jsx)(n.code,{children:"String"}),"\n",(0,i.jsx)(n.code,{children:"Max_imit "})," - Reserved number, optional parameter Type: ",(0,i.jsx)(n.code,{children:"Int"})]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'mysql [test_query_qa]>select split_by_regexp(\'abcde\',"");\n+------------------------------+\n| split_by_regexp(\'abcde\', \'\') |\n+------------------------------+\n| ["a", "b", "c", "d", "e"]    |\n+------------------------------+\n1 row in set (0.02 sec)\n\nmysql [test_query_qa]>select split_by_regexp(\'a12bc23de345f\',"\\\\d+");\n+-----------------------------------------+\n| split_by_regexp(\'a12bc23de345f\', \'\\d+\') |\n+-----------------------------------------+\n| ["a", "bc", "de", "f"]                  |\n+-----------------------------------------+\n1 row in set (0.01 sec)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"keywords",children:"keywords"}),"\n",(0,i.jsx)(n.p,{children:"SPLIT_BY_REGEXP,SPLIT"})]})}function p(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return a},a:function(){return l}});var s=t(667294);let i={},r=s.createContext(i);function l(e){let n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);