"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["13818"],{810613:function(e,n,i){i.r(n),i.d(n,{metadata:()=>r,contentTitle:()=>l,default:()=>h,assets:()=>o,toc:()=>d,frontMatter:()=>s});var r=JSON.parse('{"id":"query-acceleration/materialized-view/async-materialized-view/overview","title":"Overview","description":"\x3c!--","source":"@site/versioned_docs/version-2.1/query-acceleration/materialized-view/async-materialized-view/overview.md","sourceDirName":"query-acceleration/materialized-view/async-materialized-view","slug":"/query-acceleration/materialized-view/async-materialized-view/overview","permalink":"/docs/query-acceleration/materialized-view/async-materialized-view/overview","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"Overview","language":"en"},"sidebar":"docs","previous":{"title":"Sync-Materialized View","permalink":"/docs/query-acceleration/materialized-view/sync-materialized-view"},"next":{"title":"Functions and Demands","permalink":"/docs/query-acceleration/materialized-view/async-materialized-view/functions-and-demands"}}'),t=i("785893"),a=i("250065");let s={title:"Overview",language:"en"},l=void 0,o={},d=[{value:"Create Async-Materialized View",id:"create-async-materialized-view",level:2},{value:"Manual Partition",id:"manual-partition",level:3},{value:"Auto Partition Based on the Base Table",id:"auto-partition-based-on-the-base-table",level:3},{value:"Refresh Async-Materialized View",id:"refresh-async-materialized-view",level:2},{value:"Manual Refresh",id:"manual-refresh",level:3},{value:"Scheduled Refresh",id:"scheduled-refresh",level:3},{value:"Auto Refresh",id:"auto-refresh",level:3},{value:"Transparent Rewrite",id:"transparent-rewrite",level:2},{value:"Flow Chart",id:"flow-chart",level:3},{value:"Transparent Rewrite Based on Structural Information",id:"transparent-rewrite-based-on-structural-information",level:3}];function c(e){let n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"create-async-materialized-view",children:"Create Async-Materialized View"}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to partition materialized views: manual partition and auto partition based on the base table."}),"\n",(0,t.jsx)(n.h3,{id:"manual-partition",children:"Manual Partition"}),"\n",(0,t.jsx)(n.p,{children:"When creating a materialized view without specifying partition information, the materialized view will default to creating a single partition where all data is stored."}),"\n",(0,t.jsx)(n.h3,{id:"auto-partition-based-on-the-base-table",children:"Auto Partition Based on the Base Table"}),"\n",(0,t.jsx)(n.p,{children:"Materialized views can be created through joins with multiple base tables and can choose to follow the partitioning of one of the base tables (it is recommended to choose the fact table)."}),"\n",(0,t.jsxs)(n.p,{children:["For example, the table creation statements for base tables ",(0,t.jsx)(n.code,{children:"t1"})," and ",(0,t.jsx)(n.code,{children:"t2"})," are as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE `t1` (  \n  `user_id` LARGEINT NOT NULL,  \n  `o_date` DATE NOT NULL,  \n  `num` SMALLINT NOT NULL  \n) ENGINE=OLAP  \nCOMMENT 'OLAP'  \nPARTITION BY RANGE(`o_date`)  \n(  \nPARTITION p20170101 VALUES [('2017-01-01'), ('2017-01-02')),  \nPARTITION p20170102 VALUES [('2017-01-02'), ('2017-01-03')),  \nPARTITION p20170201 VALUES [('2017-02-01'), ('2017-02-02'))  \n)  \nDISTRIBUTED BY HASH(`user_id`) BUCKETS 2  \nPROPERTIES ('replication_num' = '1');  \n  \nCREATE TABLE `t2` (  \n  `user_id` LARGEINT NOT NULL,  \n  `age` SMALLINT NOT NULL  \n) ENGINE=OLAP  \nPARTITION BY LIST(`age`)  \n(  \n    PARTITION `p1` VALUES IN ('1'),  \n    PARTITION `p2` VALUES IN ('2')  \n)  \nDISTRIBUTED BY HASH(`user_id`) BUCKETS 2  \nPROPERTIES ('replication_num' = '1');\n"})}),"\n",(0,t.jsx)(n.p,{children:"If the materialized view creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \nBUILD DEFERRED REFRESH AUTO ON MANUAL  \npartition by(`order_date`)  \nDISTRIBUTED BY RANDOM BUCKETS 2  \nPROPERTIES (  \n'replication_num' = '1'  \n)  \nAS  \nSELECT t1.o_date as order_date, t1.user_id as user_id, t1.num, t2.age FROM t1 join t2 on t1.user_id=t2.user_id;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then the materialized view ",(0,t.jsx)(n.code,{children:"mv1"})," will have the same three partitions as ",(0,t.jsx)(n.code,{children:"t1"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"[('2017-01-01'), ('2017-01-02'))"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"[('2017-01-02'), ('2017-01-03'))"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"[('2017-02-01'), ('2017-02-02'))"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"If the materialized view creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv2  \nBUILD DEFERRED REFRESH AUTO ON MANUAL  \npartition by(`age`)  \nDISTRIBUTED BY RANDOM BUCKETS 2  \nPROPERTIES (  \n'replication_num' = '1'  \n)  \nAS  \nSELECT t1.o_date as order_date, t1.user_id as user_id, t1.num, t2.age FROM t1 join t2 on t1.user_id=t2.user_id;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Then the materialized view ",(0,t.jsx)(n.code,{children:"mv2"})," will have the same two partitions as ",(0,t.jsx)(n.code,{children:"t2"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"('1')"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"('2')"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When creating materialized views that depend on base table partitions, different partition strategies need to be designed appropriately for different scenarios. Below are examples illustrating multi-column partitioning, partial partitioning, and partition roll-up."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Base Table with Multi-Column Partitioning"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Supported since Doris 2.1.0"})}),"\n",(0,t.jsx)(n.p,{children:"Currently, only Hive external tables support multi-column partitioning. Hive external tables often have multi-level partitioning, for example, one level by date and another by region. The materialized view can choose one of the partitioning columns from Hive as its partitioning column."}),"\n",(0,t.jsx)(n.p,{children:"For example, the Hive table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE hive1 (\n`k1` int)\nPARTITIONED BY (\n`year` int,\n`region` string)\nSTORED AS ORC;\n\nalter table hive1 add if not exists\npartition(year=2020,region="bj")\npartition(year=2020,region="sh")\npartition(year=2021,region="bj")\npartition(year=2021,region="sh")\npartition(year=2022,region="bj")\npartition(year=2022,region="sh")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When the materialized view creation statement is as follows, the materialized view ",(0,t.jsx)(n.code,{children:"mv_hive"})," will have three partitions: ",(0,t.jsx)(n.code,{children:"('2020'), ('2021'), ('2022')"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_hive\nBUILD DEFERRED REFRESH AUTO ON MANUAL\npartition by(`year`)\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT k1,year,region FROM hive1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When the materialized view creation statement is as follows, the materialized view ",(0,t.jsx)(n.code,{children:"mv_hive2"})," will have two partitions: ",(0,t.jsx)(n.code,{children:"('bj'), ('sh')"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv_hive2\nBUILD DEFERRED REFRESH AUTO ON MANUAL\npartition by(`region`)\nDISTRIBUTED BY RANDOM BUCKETS 2\nPROPERTIES ('replication_num' = '1')\nAS\nSELECT k1,year,region FROM hive1;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Using Partial Base Table Partitioning"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Supported since Doris 2.1.1"})}),"\n",(0,t.jsx)(n.p,{children:'Some base tables have many partitions, but the materialized view only focuses on the "hot" data from a recent period. This feature can be used in such scenarios.'}),"\n",(0,t.jsx)(n.p,{children:"The base table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE t1 (  \n    `k1` INT,  \n    `k2` DATE NOT NULL  \n) ENGINE=OLAP  \nDUPLICATE KEY(`k1`)  \nCOMMENT \'OLAP\'  \nPARTITION BY range(`k2`)  \n(  \nPARTITION p26 VALUES [("2024-03-26"),("2024-03-27")),  \nPARTITION p27 VALUES [("2024-03-27"),("2024-03-28")),  \nPARTITION p28 VALUES [("2024-03-28"),("2024-03-29"))  \n)  \nDISTRIBUTED BY HASH(`k1`) BUCKETS 2  \nPROPERTIES (  \n\'replication_num\' = \'1\'  \n);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The materialized view creation statement, representing that the materialized view only focuses on the data from the last day, is as follows. If the current time is 2024-03-28 xx:xx:xx, the materialized view will only have one partition ",(0,t.jsx)(n.code,{children:'[("2024-03-28"),("2024-03-29")]'}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \nBUILD DEFERRED REFRESH AUTO ON MANUAL  \npartition by(`k2`)  \nDISTRIBUTED BY RANDOM BUCKETS 2  \nPROPERTIES (  \n'replication_num' = '1',  \n'partition_sync_limit'='1',  \n'partition_sync_time_unit'='DAY'  \n)  \nAS  \nSELECT * FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the time passes by another day, and the current time becomes ",(0,t.jsx)(n.code,{children:"2024-03-29 xx:xx:xx"}),", ",(0,t.jsx)(n.code,{children:"t1"})," will add a new partition ",(0,t.jsx)(n.code,{children:'[("2024-03-29"),("2024-03-30")]'}),". If the materialized view is refreshed at this point, after the refresh, the materialized view will only have one partition ",(0,t.jsx)(n.code,{children:'[("2024-03-29"),("2024-03-30")]'}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, if the partition field is of string type, you can set the materialized view property ",(0,t.jsx)(n.code,{children:"partition_date_format"}),", such as ",(0,t.jsx)(n.code,{children:"%Y-%m-%d"}),"."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Partition Roll-Up"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Supported since Doris 2.1.5"})}),"\n",(0,t.jsx)(n.p,{children:"When the base table data is aggregated, the data volume in each partition may significantly decrease. In such cases, a partition roll-up strategy can be adopted to reduce the number of partitions in the materialized view."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"List Partitioning"}),"\n",(0,t.jsx)(n.p,{children:"Note that partitions in Hive correspond to the list partitions in Doris."}),"\n",(0,t.jsx)(n.p,{children:"Assuming the base table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE `t1` (  \n`k1` INT NOT NULL,  \n`k2` DATE NOT NULL  \n) ENGINE=OLAP  \nDUPLICATE KEY(`k1`)  \nCOMMENT 'OLAP'  \nPARTITION BY list(`k2`)  \n(  \nPARTITION p_20200101 VALUES IN (\"2020-01-01\"),  \nPARTITION p_20200102 VALUES IN (\"2020-01-02\"),  \nPARTITION p_20200201 VALUES IN (\"2020-02-01\")  \n)  \nDISTRIBUTED BY HASH(`k1`) BUCKETS 2  \nPROPERTIES ('replication_num' = '1');\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, the materialized view will have two partitions: ",(0,t.jsx)(n.code,{children:'("2020-01-01","2020-01-02")'})," and ",(0,t.jsx)(n.code,{children:'("2020-02-01")'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \n    BUILD DEFERRED REFRESH AUTO ON MANUAL  \n    partition by (date_trunc(`k2`,'month'))  \n    DISTRIBUTED BY RANDOM BUCKETS 2  \n    PROPERTIES (  \n    'replication_num' = '1'  \n    )  \n    AS  \n    SELECT * FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, the materialized view will have only one partition: ",(0,t.jsx)(n.code,{children:'("2020-01-01","2020-01-02","2020-02-01")'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \n    BUILD DEFERRED REFRESH AUTO ON MANUAL  \n    partition by (date_trunc(`k2`,'year'))  \n    DISTRIBUTED BY RANDOM BUCKETS 2  \n    PROPERTIES (  \n    'replication_num' = '1'  \n    )  \n    AS  \n    SELECT * FROM t1;\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Range Partitioning"}),"\n",(0,t.jsx)(n.p,{children:"Assuming the base table creation statement is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE `t1` (  \n`k1` LARGEINT NOT NULL,  \n`k2` DATE NOT NULL  \n) ENGINE=OLAP  \nDUPLICATE KEY(`k1`)  \nCOMMENT \'OLAP\'  \nPARTITION BY range(`k2`)  \n(  \nPARTITION p_20200101 VALUES [("2020-01-01"),("2020-01-02")),  \nPARTITION p_20200102 VALUES [("2020-01-02"),("2020-01-03")),  \nPARTITION p_20200201 VALUES [("2020-02-01"),("2020-02-02"))  \n)  \nDISTRIBUTED BY HASH(`k1`) BUCKETS 2  \nPROPERTIES (\'replication_num\' = \'1\');\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, the materialized view will have two partitions: ",(0,t.jsx)(n.code,{children:'[("2020-01-01","2020-02-01")]'})," and ",(0,t.jsx)(n.code,{children:'[("2020-02-01","2020-03-01")]'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \n    BUILD DEFERRED REFRESH AUTO ON MANUAL  \n    partition by (date_trunc(`k2`,'month'))  \n    DISTRIBUTED BY RANDOM BUCKETS 2  \n    PROPERTIES (  \n    'replication_num' = '1'  \n    )  \n    AS  \n    SELECT * FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, the materialized view will have only one partition: ",(0,t.jsx)(n.code,{children:'[("2020-01-01","2021-01-01")]'})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \n    BUILD DEFERRED REFRESH AUTO ON MANUAL  \n    partition by (date_trunc(`k2`,'year'))  \n    DISTRIBUTED BY RANDOM BUCKETS 2  \n    PROPERTIES (  \n    'replication_num' = '1'  \n    )  \n    AS  \n    SELECT * FROM t1;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Additionally, if the partition field is of string type, you can specify the date format by setting the ",(0,t.jsx)(n.code,{children:"partition_date_format"})," property of the materialized view, such as ",(0,t.jsx)(n.code,{children:"'%Y-%m-%d'"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"refresh-async-materialized-view",children:"Refresh Async-Materialized View"}),"\n",(0,t.jsx)(n.p,{children:"Materialized views are refreshed on a per-partition basis. If no specific partition is designated for the materialized view, its default partition will be refreshed during each refresh operation, effectively refreshing all data within the materialized view."}),"\n",(0,t.jsx)(n.p,{children:"There are three trigger mechanisms for refreshing materialized views:"}),"\n",(0,t.jsx)(n.h3,{id:"manual-refresh",children:"Manual Refresh"}),"\n",(0,t.jsx)(n.p,{children:"Users can trigger the refresh of materialized views through SQL statements. Currently, there are three strategies:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Refresh without concern for specific partitions, requiring that the data in the materialized view synchronizes with the base table upon completion."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REFRESH MATERIALIZED VIEW mvName AUTO;\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Refresh all partitions of the materialized view, regardless of its current data."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REFRESH MATERIALIZED VIEW mvName COMPLETE;\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Refresh only specified partitions of the materialized view, regardless of its current data."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"REFRESH MATERIALIZED VIEW mvName partitions(partitionName1,partitionName2);\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["::: tip\n",(0,t.jsx)(n.code,{children:"partitionName"})," can be retrieved through ",(0,t.jsx)(n.code,{children:"SHOW PARTITIONS FROM mvName"}),".\n:::"]}),"\n",(0,t.jsx)(n.h3,{id:"scheduled-refresh",children:"Scheduled Refresh"}),"\n",(0,t.jsx)(n.p,{children:"The interval for refreshing data can be specified through the materialized view creation statement."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, requiring a full refresh (",(0,t.jsx)(n.code,{children:"REFRESH COMPLETE"}),"), the materialized view will refresh every 10 hours, refreshing all partitions."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \nREFRESH COMPLETE ON SCHEDULE EVERY 10 HOUR  \nPARTITION BY(`xxx`)  \nAS  \nSELECT ...;\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, requiring automatic calculation of partitions to refresh (",(0,t.jsx)(n.code,{children:"REFRESH AUTO"}),"), the materialized view will refresh every 10 hours (since version 2.1.3, it can automatically calculate partitions to refresh for Hive)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \nREFRESH AUTO ON SCHEDULE EVERY 10 HOUR  \nPARTITION BY(`xxx`)  \nAS  \nSELECT ...;\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"auto-refresh",children:"Auto Refresh"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"Supported since Apache Doris version 2.1.4."})}),"\n",(0,t.jsx)(n.p,{children:"After data in the base table changes, the related materialized views are automatically triggered for refresh, with the same partition scope as scheduled triggers."}),"\n",(0,t.jsxs)(n.p,{children:["If the materialized view creation statement is as follows, when data in ",(0,t.jsx)(n.code,{children:"t1"})," changes, it will automatically trigger the refresh of the materialized view."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MATERIALIZED VIEW mv1  \nREFRESH ON COMMIT  \nPARTITION BY(`xxx`)  \nAS  \nSELECT ... FROM t1;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"transparent-rewrite",children:"Transparent Rewrite"}),"\n",(0,t.jsx)(n.p,{children:"Doris's async-materialized views employ an algorithm based on SPJG (SELECT-PROJECT-JOIN-GROUP-BY) pattern structural information for transparent rewrite. Doris can analyze the structural information of query SQL, automatically search for materialized views that meet the requirements, and attempt transparent rewrite, using the optimal materialized view to express the query SQL."}),"\n",(0,t.jsx)(n.h3,{id:"flow-chart",children:"Flow Chart"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Transparent Rewrite",src:i(454177).Z+"",width:"1920",height:"3506"})}),"\n",(0,t.jsx)(n.h3,{id:"transparent-rewrite-based-on-structural-information",children:"Transparent Rewrite Based on Structural Information"}),"\n",(0,t.jsx)(n.p,{children:"As shown in the flowchart, after obtaining the query structure corresponding to the materialization, transparent rewrite will be based on structural information. At this point, the following verifications are required:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Verify if the materialized view contains all rows required for the query"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For the query: ",(0,t.jsx)(n.code,{children:"SELECT * FROM T1, T2, \u2026, Tm WHERE Wq"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["For the materialized view: ",(0,t.jsx)(n.code,{children:"SELECT * FROM T1, T2, \u2026, Tm WHERE Wv"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"The query conditions must be stronger than or equal to the materialized conditions."})}),"\n",(0,t.jsxs)(n.p,{children:["Where T1, T2 are tables, Wq represents the WHERE filter condition of the query, and Wv represents the WHERE filter condition of the materialized view. To ensure that the view contains all rows required by the query, the filter condition Wq must be able to derive Wv, i.e., ",(0,t.jsx)(n.code,{children:"Wq -> Wv"})," (for example, if ",(0,t.jsx)(n.code,{children:"Wq > 20"})," and ",(0,t.jsx)(n.code,{children:"Wv > 10"}),", Wq can derive Wv)."]}),"\n",(0,t.jsx)(n.p,{children:"The expression W can be further refined, with filter expressions divisible into three parts: PE \u2227 PR \u2227 PU."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"PE represents equal expressions;"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'PR represents range filter expressions, using operators such as "<", "\u2264", "=", "\u2265", ">";'}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"PU represents residual expressions excluding the aforementioned."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Therefore, based on ",(0,t.jsx)(n.code,{children:"Wq -> Wv"}),", we can derive ",(0,t.jsx)(n.code,{children:"(PEq \u2227 PRq \u2227 PUq \u2192 PEv \u2227 PRv \u2227 PUv)"}),". Where q represents the query, and v represents the materialized view."]}),"\n",(0,t.jsx)(n.p,{children:"Since A -> C, then AB -> C. The above expression can be further derived as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",children:"(PEq\u2227 PRq\u2227PUq\u21D2 PEv )\u2227  \n(PEq\u2227 PRq\u2227PUq\u21D2 PRv)\u2227  \n(PEq\u2227 PRq\u2227PUq\u21D2 PUv)\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which can be further simplified to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-Plain",children:"(PEq \u21D2 PEv ) (Equijoin subsumption test - Equivalence condition verification)  \n(PEq \u2227 PRq \u21D2 PRv) (Range subsumption test - Range condition verification)  \n(PEq \u2227 PUq \u21D2 PUv ) (Residual subsumption test - Residual condition verification)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Equivalence condition verification: The general principle is that the equal expressions of the materialized view are a subset of the query's equal expressions. Equivalent expressions are transitive and should maintain correctness."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The range expressions of the view should encompass those of the query. For example, T=constant can be converted to T>=constant AND T<=constant."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Using Expression Equals, verify if the residual expressions appearing in the materialized view are a subset of those in the query."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Next, we will further explain the verification steps through examples:"}),"\n",(0,t.jsx)(n.p,{children:"Materialized view definition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT l_orderkey, o_custkey, l_partkey,  \nl_shipdate, o_orderdate,  \nl_quantity*l_extendedprice AS gross_revenue  \nFROM dbo.lineitem, dbo.orders, dbo.part  \nWHERE l_orderkey = o_orderkey  \nAND l_partkey = p_partkey  \nAND p_partkey >= 150  \nAND o_custkey >= 50 AND o_custkey <= 500  \nAND p_name LIKE '%abc%'\n"})}),"\n",(0,t.jsx)(n.p,{children:"Query definition:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"SELECT l_orderkey, o_custkey, l_partkey,  \nl_quantity*l_extendedprice  \nFROM lineitem, orders, part  \nWHERE l_orderkey = o_orderkey  \nAND l_partkey = p_partkey  \nAND l_partkey >= 150 AND l_partkey <= 160  \nAND o_custkey = 123  \nAND o_orderdate = l_shipdate  \nAND p_name LIKE '%abc%'  \nAND l_quantity*l_extendedprice > 100\n"})}),"\n",(0,t.jsx)(n.p,{children:"Step 1: Calculate equivalence classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["View equivalence classes: ",(0,t.jsx)(n.code,{children:"{l_orderkey, o_orderkey},{l_partkey, p_partkey}, {o_orderdate}, {l_shipdate}"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Query equivalence classes: ",(0,t.jsx)(n.code,{children:"{l_orderkey, o_orderkey},{l_partkey, p_partkey}, {o_orderdate, l_shipdate}"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Step 2: verify equivalence equivalence classes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If the view equivalence expression is a subset of the query equivalence expression, the verification passes."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Step 3: Calculate range expressions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["View range expressions: ",(0,t.jsx)(n.code,{children:"{l_partkey, p_partkey} \u2208 (150, +\u221E), {o_custkey} \u2208 (50, 500)"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Query range expressions: ",(0,t.jsx)(n.code,{children:"{l_partkey, p_partkey} \u2208 (150, 160), {o_custkey} \u2208 (123, 123)"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Step 4: Verify range expressions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"View range expressions: (150, 160) falls within (150, +\u221E)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Query range expressions: (123, 123) falls within (50, 500)"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Step 5: Verify residual expressions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"View residual expression: p_name LIKE '%abc%'"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Query residual expression: p_name LIKE '%abc%'"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Since ",(0,t.jsx)(n.code,{children:"l_quantity*l_extendedprice > 100"}),", the view's residual expression is a subset of the query's. After verifying the above steps, we can ensure all rows are retrieved from the view, and compensation conditions need to be added to the view:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"(o_orderdate = l_shipdate),   \n({p_partkey,l_partkey} <= 160),   \n(o_custkey = 123), and  \n(l_quantity*l_extendedprice > 100.00).\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Verify if the compensation conditions can be obtained from the materialized view"})}),"\n",(0,t.jsx)(n.p,{children:"To ensure the final data obtained is consistent with the original query, compensation conditions need to be added to the view. Verification is required to confirm if the columns or expressions selected in the compensation conditions can be obtained from the view."}),"\n",(0,t.jsxs)(n.p,{children:["This involves verifying if columns ",(0,t.jsx)(n.code,{children:"o_orderdate"}),", ",(0,t.jsx)(n.code,{children:"l_shipdate"}),", ",(0,t.jsx)(n.code,{children:"p_partkey"}),", ",(0,t.jsx)(n.code,{children:"{p_partkey, l_partkey}"}),", ",(0,t.jsx)(n.code,{children:"o_custkey"}),", and expression ",(0,t.jsx)(n.code,{children:"l_quantity*l_extendedprice"})," can be obtained from the view."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Verify if expressions and columns can be obtained from the materialized view"})}),"\n",(0,t.jsx)(n.p,{children:"Similar to verifying compensation conditions, if the output expression is a constant, it can be directly copied from the view. If it's a simple column reference, verify if it can be obtained from the view. For expressions, if the columns in the expression can be obtained from the materialized view, obtain them directly; otherwise, the verification fails."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"4. Verify consistency in output data duplication"})}),"\n",(0,t.jsx)(n.p,{children:"For data obtained through queries and materialized views, the number of duplicate rows must be the same. If the tables referenced by the query and materialized view are the same, this issue will not arise. Duplicates and their counts may differ only when the tables referenced by the query and materialized view are different, especially in star schema queries with an additional join that is not a primary-foreign key relationship, potentially leading to data expansion and inconsistent duplication factors."}),"\n",(0,t.jsx)(n.p,{children:"Usually, it's necessary to verify the JOIN types of the materialized view and query for the same tables and whether JOIN elimination is satisfied for different tables."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"5. Aggregation verification"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Verify if the materialized dimensions are finer than those of the query and if they encompass the query's dimensions."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Verify if the aggregation functions used in the query can be obtained from the materialized view or derived through roll-up of the materialized view's functions."}),"\n"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},454177:function(e,n,i){i.d(n,{Z:function(){return r}});let r=i.p+"assets/images/transparency-rewriting-011a673a27b3d576537fcd5a1244f45b.jpg"},250065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return s}});var r=i(667294);let t={},a=r.createContext(t);function s(e){let n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);