"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["629863"],{283827:function(n,e,t){t.r(e),t.d(e,{metadata:()=>s,contentTitle:()=>c,default:()=>d,assets:()=>i,toc:()=>l,frontMatter:()=>r});var s=JSON.parse('{"id":"sql-manual/sql-functions/aggregate-functions/group_concat","title":"GROUP_CONCAT","description":"\x3c!--","source":"@site/versioned_docs/version-1.2/sql-manual/sql-functions/aggregate-functions/group_concat.md","sourceDirName":"sql-manual/sql-functions/aggregate-functions","slug":"/sql-manual/sql-functions/aggregate-functions/group_concat","permalink":"/docs/1.2/sql-manual/sql-functions/aggregate-functions/group_concat","draft":false,"unlisted":false,"tags":[],"version":"1.2","frontMatter":{"title":"GROUP_CONCAT","language":"en"},"sidebar":"docs","previous":{"title":"STDDEV,STDDEV_POP","permalink":"/docs/1.2/sql-manual/sql-functions/aggregate-functions/stddev"},"next":{"title":"COLLECT_LIST","permalink":"/docs/1.2/sql-manual/sql-functions/aggregate-functions/collect_list"}}'),o=t("785893"),a=t("250065");let r={title:"GROUP_CONCAT",language:"en"},c=void 0,i={},l=[{value:"GROUP_CONCAT",id:"group_concat",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"example",id:"example",level:3}];function u(n){let e={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"group_concat",children:"GROUP_CONCAT"}),"\n",(0,o.jsx)(e.h3,{id:"description",children:"description"}),"\n",(0,o.jsx)(e.h4,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.code,{children:"VARCHAR GROUP_CONCAT([DISTINCT] VARCHAR str[, VARCHAR sep]) [ORDER BY { col_name | expr} [ASC | DESC])"})}),"\n",(0,o.jsx)(e.p,{children:"This function is an aggregation function similar to sum (), and group_concat links multiple rows of results in the result set to a string. The second parameter, sep, is a connection symbol between strings, which can be omitted. This function usually needs to be used with group by statements."}),"\n",(0,o.jsx)(e.p,{children:"Support Order By for sorting multi-row results, sorting and aggregation columns can be different."}),"\n",(0,o.jsx)(e.admonition,{type:"caution",children:(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"group_concat"})," don't support using ",(0,o.jsx)(e.code,{children:"distinct"})," with ",(0,o.jsx)(e.code,{children:"order by"})," together."]})}),"\n",(0,o.jsx)(e.h3,{id:"example",children:"example"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"mysql> select value from test;\n+-------+\n| value |\n+-------+\n| a     |\n| b     |\n| c     |\n| c     |\n+-------+\n\nmysql> select GROUP_CONCAT(value) from test;\n+-----------------------+\n| GROUP_CONCAT(`value`) |\n+-----------------------+\n| a, b, c, c              |\n+-----------------------+\n\nmysql> select GROUP_CONCAT(value, \" \") from test;\n+----------------------------+\n| GROUP_CONCAT(`value`, ' ') |\n+----------------------------+\n| a b c c                     |\n+----------------------------+\n\nmysql> select GROUP_CONCAT(DISTINCT value) from test;\n+-----------------------+\n| GROUP_CONCAT(`value`) |\n+-----------------------+\n| a, b, c               |\n+-----------------------+\n\nmysql> select GROUP_CONCAT(value, NULL) from test;\n+----------------------------+\n| GROUP_CONCAT(`value`, NULL)|\n+----------------------------+\n| NULL                       |\n+----------------------------+\n\nSELECT abs(k3), group_concat(distinct cast(abs(k2) as varchar) order by abs(k1), k5) FROM bigtable group by abs(k3) order by abs(k3);     +------------+-------------------------------------------------------------------------------+\n| abs(`k3`)  | group_concat(DISTINCT CAST(abs(`k2`) AS CHARACTER), ORDER BY abs(`k1`), `k5`) |\n+------------+-------------------------------------------------------------------------------+\n|        103 | 255                                                                           |\n|       1001 | 1989, 1986                                                                    |\n|       1002 | 1989, 32767                                                                   |\n|       3021 | 1991, 32767, 1992                                                             |\n|       5014 | 1985, 1991                                                                    |\n|      25699 | 1989                                                                          |\n| 2147483647 | 255, 1991, 32767, 32767                                                       |\n+------------+-------------------------------------------------------------------------------+\n"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"### keywords\nGROUP_CONCAT,GROUP,CONCAT\n"})})]})}function d(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},250065:function(n,e,t){t.d(e,{Z:function(){return c},a:function(){return r}});var s=t(667294);let o={},a=s.createContext(o);function r(n){let e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);