"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["565280"],{492865:function(e,n,a){a.r(n),a.d(n,{metadata:()=>t,contentTitle:()=>i,default:()=>u,assets:()=>o,toc:()=>d,frontMatter:()=>r});var t=JSON.parse('{"id":"sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-TABLE-AND-GENERATED-COLUMN","title":"CREATE-TABLE-AND-GENERATED-COLUMN","description":"\x3c!--","source":"@site/docs/sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-TABLE-AND-GENERATED-COLUMN.md","sourceDirName":"sql-manual/sql-statements/Data-Definition-Statements/Create","slug":"/sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-TABLE-AND-GENERATED-COLUMN","permalink":"/docs/dev/sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-TABLE-AND-GENERATED-COLUMN","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"CREATE-TABLE-AND-GENERATED-COLUMN","language":"en"},"sidebar":"docs","previous":{"title":"CREATE-TABLE","permalink":"/docs/dev/sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-TABLE"},"next":{"title":"CREATE-TABLE-LIKE","permalink":"/docs/dev/sql-manual/sql-statements/Data-Definition-Statements/Create/CREATE-TABLE-LIKE"}}'),l=a("785893"),s=a("250065");let r={title:"CREATE-TABLE-AND-GENERATED-COLUMN",language:"en"},i=void 0,o={},d=[{value:"Grammar",id:"grammar",level:2},{value:"Restrictions on generated columns",id:"restrictions-on-generated-columns",level:2},{value:"Import data",id:"import-data",level:2},{value:"INSERT",id:"insert",level:3},{value:"Load",id:"load",level:3},{value:"Stream Load",id:"stream-load",level:4},{value:"HTTP Stream Load",id:"http-stream-load",level:4},{value:"MySQL Load",id:"mysql-load",level:4},{value:"Other Load",id:"other-load",level:4},{value:"Generated columns and partial update",id:"generated-columns-and-partial-update",level:2}];function c(e){let n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"A generated column is a special database table column whose value is calculated from the values of other columns rather than directly inserted or updated by the user. This feature supports pre-computing the results of expressions and storing them in the database, which is suitable for scenarios that require frequent queries or complex calculations."}),"\n",(0,l.jsx)(n.p,{children:"Generated columns can automatically calculate results based on predefined expressions when data is imported or updated, and store these results persistently. In this way, during subsequent queries, you can directly access these calculated results without performing complex calculations during queries, thereby significantly reducing the computational burden during queries and improving query performance."}),"\n",(0,l.jsx)(n.p,{children:"Here is an example using a generated column:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE products (\nproduct_id INT,\nprice DECIMAL(10,2),\nquantity INT,\ntotal_value DECIMAL(10,2) GENERATED ALWAYS AS (price * quantity)\n) UNIQUE KEY(product_id) \nDISTRIBUTED BY HASH(product_id) PROPERTIES ("replication_num" = "1");\n\nINSERT INTO products VALUES(1, 10.00, 10, default);\nINSERT INTO products(product_id, price, quantity) VALUES(1, 20.00, 10);\n'})}),"\n",(0,l.jsx)(n.p,{children:"Query data from the table:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT * FROM products;\n+------------+-------+----------+-------------+\n| product_id | price | quantity | total_value |\n+------------+-------+----------+-------------+\n|          1 | 10.00 |       10 |      100.00 |\n|          1 | 20.00 |       10 |      200.00 |\n+------------+-------+----------+-------------+\n"})}),"\n",(0,l.jsx)(n.p,{children:"In this example, the total_value column is a generated column whose value is calculated by multiplying the values \u200B\u200Bof the price and quantity columns.\nThe values of generated columns are calculated and stored in the table when importing or updating."}),"\n",(0,l.jsx)(n.h2,{id:"grammar",children:"Grammar"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"col_name data_type [GENERATED ALWAYS] AS (expr)\n[NOT NULL | NULL] [COMMENT 'string']\n"})}),"\n",(0,l.jsx)(n.h2,{id:"restrictions-on-generated-columns",children:"Restrictions on generated columns"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"The functions used can only be built-in scalar functions and operators. UDF, aggregate functions, etc. are not allowed."}),"\n",(0,l.jsx)(n.li,{children:"Variables, subqueries, and Lambda expressions are not allowed."}),"\n",(0,l.jsx)(n.li,{children:"AUTO_INCREMENT columns cannot be used as base columns in generated column definitions."}),"\n",(0,l.jsx)(n.li,{children:"Generated column definitions can reference other generated columns, but only columns that appear earlier in the table definition. Generated column definitions can reference any base (non-generated) column in the table, regardless of whether its definition occurs earlier or later."}),"\n",(0,l.jsx)(n.li,{children:"In the aggregate model, when the generated column is a VALUE column, only REPLACE and REPLACE_IF_NOT_NULL aggregate types are allowed."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"import-data",children:"Import data"}),"\n",(0,l.jsx)(n.p,{children:"When importing data, if the NOT NULL restriction of the generated column is violated, for example, when importing data, the column referenced by the generated column is not specified, and this column has no default value, the import will fail."}),"\n",(0,l.jsx)(n.h3,{id:"insert",children:"INSERT"}),"\n",(0,l.jsx)(n.p,{children:"When specifying columns, the specified columns cannot contain generated columns, otherwise an error will be reported."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"INSERT INTO products(product_id, price, quantity) VALUES(1, 20.00, 10);\n"})}),"\n",(0,l.jsx)(n.p,{children:"When no columns are specified, the DEFAULT keyword must be used as a placeholder for the generated columns.\u3002"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"INSERT INTO products VALUES(1, 10.00, 10, default);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"load",children:"Load"}),"\n",(0,l.jsx)(n.p,{children:"When using the load method to import data, you need to explicitly specify the import column. You should not specify a generated column as an import column. When you specify an import generated column and there is corresponding data in the data file, the generated column will not use the value in the data file, and the value of the generated column is still the result of the expression calculation."}),"\n",(0,l.jsx)(n.h4,{id:"stream-load",children:"Stream Load"}),"\n",(0,l.jsx)(n.p,{children:"Create table:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'mysql> CREATE TABLE gen_col_stream_load(a INT,b INT,c DOUBLE GENERATED ALWAYS AS (abs(a+b)) not null)\nDISTRIBUTED BY HASH(a)\nPROPERTIES("replication_num" = "1");\n'})}),"\n",(0,l.jsx)(n.p,{children:"Prepare data and perform stream loading:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'cat gen_col_data.csv \n1,2\n3,5\n2,9\n\ncurl --location-trusted -u root: \\\n-H "Expect:100-continue" \\\n-H "column_separator:," \\\n-H "columns:a,b" \\\n-T gen_col_data.csv \\\n-XPUT http://127.0.0.1:8030/api/testdb/gen_col_stream_load/_stream_load\n{\n    "TxnId": 223227,\n    "Label": "d4a615c9-6e73-4d95-a8a4-e4c30d3b2262",\n    "Comment": "",\n    "TwoPhaseCommit": "false",\n    "Status": "Success",\n    "Message": "OK",\n    "NumberTotalRows": 3,\n    "NumberLoadedRows": 3,\n    "NumberFilteredRows": 0,\n    "NumberUnselectedRows": 0,\n    "LoadBytes": 12,\n    "LoadTimeMs": 152,\n    "BeginTxnTimeMs": 5,\n    "StreamLoadPutTimeMs": 39,\n    "ReadDataTimeMs": 0,\n    "WriteDataTimeMs": 66,\n    "CommitAndPublishTimeMs": 37\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"View the data import results:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT * FROM gen_col_stream_load;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|    1 |    2 |    3 |\n|    2 |    9 |   11 |\n|    3 |    5 |    8 |\n+------+------+------+\n3 rows in set (0.07 sec)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"http-stream-load",children:"HTTP Stream Load"}),"\n",(0,l.jsx)(n.p,{children:"Create table:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'mysql> CREATE TABLE gencol_refer_gencol_http_load(a INT,c DOUBLE GENERATED ALWAYS AS (abs(a+b)) NOT NULL,b INT, d INT GENERATED ALWAYS AS(c+1))\nDISTRIBUTED BY HASH(a)\nPROPERTIES("replication_num" = "1");\n'})}),"\n",(0,l.jsx)(n.p,{children:"Prepare data and perform HTTP stream loading:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'curl  --location-trusted -u root: -T gen_col_data.csv  -H "Expect: 100-Continue" \\\n-H "sql:insert into testdb.gencol_refer_gencol_http_load(a, b) select * from http_stream(\\"format\\" = \\"CSV\\", \\"column_separator\\" = \\",\\" )" \\\nhttp://127.0.0.1:8030/api/_http_stream\n{\n    "TxnId": 223244,\n    "Label": "label_824464cba2a1eabc_bee78e427ea55e81",\n    "Comment": "",\n    "TwoPhaseCommit": "false",\n    "Status": "Success",\n    "Message": "OK",\n    "NumberTotalRows": 3,\n    "NumberLoadedRows": 3,\n    "NumberFilteredRows": 0,\n    "NumberUnselectedRows": 0,\n    "LoadBytes": 12,\n    "LoadTimeMs": 142,\n    "BeginTxnTimeMs": 0,\n    "StreamLoadPutTimeMs": 45,\n    "ReadDataTimeMs": 46,\n    "WriteDataTimeMs": 59,\n    "CommitAndPublishTimeMs": 36\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"View the data import results:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> SELECT * FROM gencol_refer_gencol_http_load;                                                                                                                          +------+------+------+------+\n| a    | c    | b    | d    |\n+------+------+------+------+\n|    2 |   11 |    9 |   12 |\n|    1 |    3 |    2 |    4 |\n|    3 |    8 |    5 |    9 |\n+------+------+------+------+\n3 rows in set (0.04 sec)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"mysql-load",children:"MySQL Load"}),"\n",(0,l.jsx)(n.p,{children:"The process of creating a table, loading data and querying is as follows:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> CREATE TABLE gen_col_mysql_load(a INT,b INT,c DOUBLE GENERATED ALWAYS AS (abs(a+b)) NOT NULL)\nDISTRIBUTED BY HASH(a)\nPROPERTIES(\"replication_num\" = \"1\");\n\nmysql> LOAD DATA LOCAL\nINFILE '/path_to_data/gen_col_data.csv'\nINTO TABLE gen_col_mysql_load\nCOLUMNS TERMINATED BY ','\n(a,b);\nQuery OK, 3 rows affected (0.14 sec)\nRecords: 3  Deleted: 0  Skipped: 0  Warnings: 0\n\nmysql> SELECT * FROM gen_col_mysql_load;\n+------+------+------+\n| a    | b    | c    |\n+------+------+------+\n|    2 |    9 |   11 |\n|    3 |    5 |    8 |\n|    1 |    2 |    3 |\n+------+------+------+\n3 rows in set (0.06 sec)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"other-load",children:"Other Load"}),"\n",(0,l.jsx)(n.p,{children:"BROKER LOAD, ROUTINE LOAD and other methods can import data into a table with generated columns, which will not be listed here."}),"\n",(0,l.jsx)(n.h2,{id:"generated-columns-and-partial-update",children:"Generated columns and partial update"}),"\n",(0,l.jsx)(n.p,{children:"When updating some columns, you must specify all the common columns referenced by the generated columns in columns, otherwise an error will be reported."}),"\n",(0,l.jsx)(n.p,{children:"The following is an example to create a table, insert a row of data, and set the session variable:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:'CREATE TABLE test_partial_column_unique_gen_col (a INT, b INT, c INT AS (a+b), d INT AS (c+1), e INT)\nUNIQUE KEY(a) DISTRIBUTED BY HASH(a) PROPERTIES(\n "enable_unique_key_merge_on_write" = "true",\n "replication_num"="1"\n);\nSET enable_unique_key_partial_update=true;\nSET enable_insert_strict=false;\nSET enable_fallback_to_original_planner=false;\nINSERT INTO test_partial_column_unique_gen_col(a,b,e) VALUES(1,2,7);\n'})}),"\n",(0,l.jsx)(n.p,{children:"If all referenced normal columns are not specified, an error will be reported:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-sql",children:"mysql> INSERT INTO test_partial_column_unique_gen_col(a) VALUES(3);\nERROR 1105 (HY000): errCode = 2, detailMessage = Partial update should include all ordinary columns referenced by generated columns, missing: b\n"})}),"\n",(0,l.jsx)(n.p,{children:'The same is true for LOAD. All referenced normal columns need to be specified in -H "columns: a, b". The following is an example of using stream load:'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'curl --location-trusted -u root: -H "Expect:100-continue" -H "column_separator:," \\\n-H "columns: a, b" -H "partial_columns:true" \\\n-T /Users/moailing/Documents/tmp/gen_col_data.csv \\\nhttp://127.0.0.1:8030/api/testdb/partial_column_unique_gen_col/_stream_load\n'})})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},250065:function(e,n,a){a.d(n,{Z:function(){return i},a:function(){return r}});var t=a(667294);let l={},s=t.createContext(l);function r(e){let n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);