"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["241265"],{867424:function(e,n,t){t.r(n),t.d(n,{metadata:()=>i,contentTitle:()=>l,default:()=>d,assets:()=>a,toc:()=>c,frontMatter:()=>o});var i=JSON.parse('{"id":"query-acceleration/tuning/tuning-plan/adjusting-join-shuffle","title":"Adjusting Join Shuffle with Hint","description":"\x3c!--","source":"@site/versioned_docs/version-2.1/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle.md","sourceDirName":"query-acceleration/tuning/tuning-plan","slug":"/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle","permalink":"/docs/query-acceleration/tuning/tuning-plan/adjusting-join-shuffle","draft":false,"unlisted":false,"tags":[],"version":"2.1","frontMatter":{"title":"Adjusting Join Shuffle with Hint","language":"zh-CN"},"sidebar":"docs","previous":{"title":"Optimizing Join with Colocate Group","permalink":"/docs/query-acceleration/tuning/tuning-plan/optimizing-join-with-colocate-group"},"next":{"title":"Controlling Hints with CBO Rule","permalink":"/docs/query-acceleration/tuning/tuning-plan/controlling-hints-with-cbo-rule"}}'),s=t("785893"),r=t("250065");let o={title:"Adjusting Join Shuffle with Hint",language:"zh-CN"},l=void 0,a={},c=[{value:"Principle",id:"principle",level:2},{value:"Use Case",id:"use-case",level:2},{value:"Summary",id:"summary",level:2}];function h(e){let n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"principle",children:"Principle"}),"\n",(0,s.jsx)(n.p,{children:"Doris supports the use of hints to adjust the type of data shuffle in Join operations, thereby optimizing query performance. This section will introduce in detail how to use hints in Doris to specify the type of Join shuffle."}),"\n",(0,s.jsxs)(n.p,{children:["Currently, Doris is limited to specifying the Distribute Type for the right table in a Join and provides only two types to choose from: ",(0,s.jsx)(n.code,{children:"[shuffle]"})," and ",(0,s.jsx)(n.code,{children:"[broadcast]"}),". The Distribute Type needs to be placed before the right table in the Join, using square brackets ",(0,s.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Examples are as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"SELECT COUNT(*) FROM t2 JOIN [broadcast] t1 ON t1.c1 = t2.c2;\nSELECT COUNT(*) FROM t2 JOIN [shuffle] t1 ON t1.c1 = t2.c2;\nSELECT /*+ ordered */ COUNT(*) FROM t2 JOIN [broadcast] t1 ON t1.c1 = t2.c2;\nSELECT /*+ ordered */ COUNT(*) FROM t2 JOIN [shuffle] t1 ON t1.c1 = t2.c2;\n"})}),"\n",(0,s.jsx)(n.p,{children:"When using hints, please note the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'If Doris encounters a DistributeHint that cannot correctly generate an execution plan, it will not display the hint but will make it effective according to the "best effort" principle. Ultimately, the distribute method displayed by EXPLAIN shall be deemed as final.'}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the current version, DistributeHint does not support mixing with LEADING, and the hint will only take effect when the table specified by distribute is on the right side of the Join."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"It is recommended to mix DistributeHint with ORDERED. First, use ORDERED to fix the Join order, and then specify the expected distribute method in the corresponding Join."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"use-case",children:"Use Case"}),"\n",(0,s.jsx)(n.p,{children:"Next, we will demonstrate the use of hints through the same example:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. Before Using Hint:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SHAPE PLAN SELECT COUNT(*) FROM t1 JOIN t2 ON t1.c1 = t2.c2;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"+----------------------------------------------------------------------------------+  \n| Explain String (Nereids Planner)                                                 |  \n+----------------------------------------------------------------------------------+  \n| PhysicalResultSink                                                               |  \n| --hashAgg [GLOBAL]                                                               |  \n| ----PhysicalDistribute [DistributionSpecGather]                                  |  \n| ------hashAgg [LOCAL]                                                            |  \n| --------PhysicalProject                                                          |  \n| ----------hashJoin [INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()|  \n| ------------PhysicalProject                                                      |  \n| --------------PhysicalOlapScan [t1]                                              |  \n| ------------PhysicalDistribute [DistributionSpecHash]                            |  \n| --------------PhysicalProject                                                    |  \n| ----------------PhysicalOlapScan [t2]                                            |  \n+----------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. After Using Hint:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLAIN SHAPE PLAN SELECT /*+ ordered */ COUNT(*) FROM t2 JOIN [broadcast] t1 ON t1.c1 = t2.c2;\n"})}),"\n",(0,s.jsx)(n.p,{children:"Result:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"+----------------------------------------------------------------------------------+  \n| Explain String (Nereids Planner)                                                 |  \n+----------------------------------------------------------------------------------+  \n| PhysicalResultSink                                                               |  \n| --hashAgg [GLOBAL]                                                               |  \n| ----PhysicalDistribute [DistributionSpecGather]                                  |  \n| ------hashAgg [LOCAL]                                                            |  \n| --------PhysicalProject                                                          |  \n| ----------hashJoin [INNER_JOIN] hashCondition=((t1.c1 = t2.c2)) otherCondition=()|  \n| ------------PhysicalProject                                                      |  \n| --------------PhysicalOlapScan [t2]                                              |  \n| ------------PhysicalDistribute [DistributionSpecReplicated]                      |  \n| --------------PhysicalProject                                                    |  \n| ----------------PhysicalOlapScan [t1]                                            |  \n|                                                                                  |  \n| Hint log:                                                                        |  \n| Used: ORDERED                                                                    |  \n| UnUsed:                                                                          |  \n| SyntaxError:                                                                     |  \n+----------------------------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the EXPLAIN results, you can see the relevant information for the distribute operator:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DistributionSpecReplicated"})," indicates that the corresponding data is replicated to all BE nodes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DistributionSpecGather"})," indicates that the data is gathered to the FE node."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DistributionSpecHash"})," indicates that the data is scattered to different BE nodes according to a specific HashKey and algorithm."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"By reasonably using DistributeHint, you can optimize the Shuffle method for Join operations and enhance query performance. In practice, it is recommended to first analyze the query execution plan using EXPLAIN and then select the appropriate Shuffle type based on the actual situation. When using it, please pay attention to the following points:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:'If a DistributeHint fails to correctly generate an execution plan, Doris will not display the Hint but will make it effective based on the principle of "best effort". Ultimately, the Distribute method displayed by EXPLAIN prevails.'}),"\n",(0,s.jsx)(n.li,{children:"In the current version, DistributeHint temporarily does not support mixing with LEADING, and the Hint will only take effect when the table specified by Distribute is located on the right side of the Join."}),"\n",(0,s.jsx)(n.li,{children:"It is recommended to mix DistributeHint with ORDERED. First, use ORDERED to fix the Join order, and then specify the expected Distribute method for the corresponding Join."}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},250065:function(e,n,t){t.d(n,{Z:function(){return l},a:function(){return o}});var i=t(667294);let s={},r=i.createContext(s);function o(e){let n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);