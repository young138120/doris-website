"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["395709"],{339197:function(e,t,n){n.r(t),n.d(t,{metadata:()=>s,contentTitle:()=>r,default:()=>d,assets:()=>a,toc:()=>u,frontMatter:()=>o});var s=JSON.parse('{"id":"sql-manual/sql-functions/bitwise-functions/bit_test","title":"BIT_TEST","description":"\x3c!--","source":"@site/docs/sql-manual/sql-functions/bitwise-functions/bit_test.md","sourceDirName":"sql-manual/sql-functions/bitwise-functions","slug":"/sql-manual/sql-functions/bitwise-functions/bit_test","permalink":"/docs/dev/sql-manual/sql-functions/bitwise-functions/bit_test","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"BIT_TEST","language":"en"},"sidebar":"docs","previous":{"title":"BITAND","permalink":"/docs/dev/sql-manual/sql-functions/bitwise-functions/bitand"},"next":{"title":"BITOR","permalink":"/docs/dev/sql-manual/sql-functions/bitwise-functions/bitor"}}'),i=n("785893"),l=n("250065");let o={title:"BIT_TEST",language:"en"},r=void 0,a={},u=[{value:"bit_test",id:"bit_test",level:2},{value:"description",id:"description",level:3},{value:"Syntax",id:"syntax",level:4},{value:"example",id:"example",level:3},{value:"example",id:"example-1",level:3}];function c(e){let t={code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,l.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"bit_test",children:"bit_test"}),"\n",(0,i.jsx)(t.h3,{id:"description",children:"description"}),"\n",(0,i.jsx)(t.h4,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"bit_test(Integer-type value, Integer-type pos, '......')"})}),"\n",(0,i.jsx)(t.p,{children:"\"Convert the value of 'value' into binary form and return the value at the specified position 'pos', where 'pos' starts from 0 and goes from right to left. If there are multiple values for 'pos', combine the values at multiple 'pos' positions using the AND operator and return the final result.\nIf the value of pos is negative or exceeds the total number of bits in value, the result will be 0.\nInteger value ranges: TINYINT, SMALLINT, INT, BIGINT, LARGEINT.\""}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"example"}),"\n",(0,i.jsx)(t.h3,{id:"example-1",children:"example"}),"\n",(0,i.jsx)(t.p,{children:"mysql [(none)]>SELECT bit_test(43, 1);\n+-----------------+\n| bit_test(43, 1) |\n+-----------------+\n|               1 |\n+-----------------+"}),"\n",(0,i.jsx)(t.p,{children:"mysql [(none)]>select bit_test(43,-1);\n+------------------+\n| bit_test(43, -1) |\n+------------------+\n|                0 |\n+------------------+"}),"\n",(0,i.jsx)(t.p,{children:"mysql [(none)]>SELECT bit_test(43, 0, 1, 3, 5,2);\n+-----------------------------+\n| bit_test(43, 0, 1, 3, 5, 2) |\n+-----------------------------+\n|                           0 |\n+-----------------------------+"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"\n### keywords\n\n    bit_test,bit_test_all\n"})})]})}function d(e={}){let{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return r},a:function(){return o}});var s=n(667294);let i={},l=s.createContext(i);function o(e){let t=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);