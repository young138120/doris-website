"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["849911"],{897687:function(e,t,n){n.r(t),n.d(t,{metadata:()=>s,contentTitle:()=>a,default:()=>p,assets:()=>c,toc:()=>d,frontMatter:()=>o});var s=JSON.parse('{"id":"lakehouse/datalake-analytics/tpcds","title":"TPCDS","description":"\x3c!--","source":"@site/versioned_docs/version-3.0/lakehouse/datalake-analytics/tpcds.md","sourceDirName":"lakehouse/datalake-analytics","slug":"/lakehouse/datalake-analytics/tpcds","permalink":"/docs/3.0/lakehouse/datalake-analytics/tpcds","draft":false,"unlisted":false,"tags":[],"version":"3.0","frontMatter":{"title":"TPCDS","language":"en"},"sidebar":"docs","previous":{"title":"TPCH","permalink":"/docs/3.0/lakehouse/datalake-analytics/tpch"},"next":{"title":"Hive","permalink":"/docs/3.0/lakehouse/datalake-building/hive-build"}}'),r=n("785893"),i=n("250065");let o={title:"TPCDS",language:"en"},a=void 0,c={},d=[{value:"Usage Notes",id:"usage-notes",level:2},{value:"Compiling the TPCDS Connector",id:"compiling-the-tpcds-connector",level:2},{value:"Deploying the TPCDS Connector",id:"deploying-the-tpcds-connector",level:2},{value:"Creating the TPCDS Catalog",id:"creating-the-tpcds-catalog",level:2},{value:"Using the TPCDS Catalog",id:"using-the-tpcds-catalog",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Quickly Build TPCDS Test Dataset",id:"quickly-build-tpcds-test-dataset",level:4}];function l(e){let t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"usage-notes",children:"Usage Notes"}),"\n",(0,r.jsxs)(t.p,{children:["TPCDS Catalog uses the ",(0,r.jsx)(t.a,{href:"https://doris.apache.org/community/how-to-contribute/trino-connector-developer-guide",children:"Trino Connector"})," compatibility framework and the ",(0,r.jsx)(t.a,{href:"https://trino.io/docs/current/connector/tpcds.html",children:"TPCDS Connector"})," to quickly build TPCDS test sets."]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"This feature is supported starting from Doris version 3.0.0."})}),"\n",(0,r.jsx)(t.h2,{id:"compiling-the-tpcds-connector",children:"Compiling the TPCDS Connector"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"JDK 17 is required."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/trinodb/trino.git\ngit checkout 435\ncd trino/plugin/trino-tpcds\nmvn clean install -DskipTest\n"})}),"\n",(0,r.jsxs)(t.p,{children:["After compiling, you will find the ",(0,r.jsx)(t.code,{children:"trino-tpcds-435/"})," directory under ",(0,r.jsx)(t.code,{children:"trino/plugin/trino-tpcds/target/"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["You can also directly download the precompiled ",(0,r.jsx)(t.a,{href:"https://github.com/morningman/trino-connectors/releases/download/trino-connectors/trino-tpcds-435.tar.gz",children:"trino-tpcds-435.tar.gz"})," and extract it."]}),"\n",(0,r.jsx)(t.h2,{id:"deploying-the-tpcds-connector",children:"Deploying the TPCDS Connector"}),"\n",(0,r.jsxs)(t.p,{children:["Place the ",(0,r.jsx)(t.code,{children:"trino-tpcds-435/"})," directory under the ",(0,r.jsx)(t.code,{children:"connectors/"})," directory in the deployment paths of all FE and BE nodes. (If it does not exist, you can create it manually)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"\u251C\u2500\u2500 bin\n\u251C\u2500\u2500 conf\n\u251C\u2500\u2500 connectors\n\u2502\xa0\xa0 \u251C\u2500\u2500 trino-tpcds-435\n...\n"})}),"\n",(0,r.jsx)(t.p,{children:"After deployment, it is recommended to restart the FE and BE nodes to ensure the Connector is loaded correctly."}),"\n",(0,r.jsx)(t.h2,{id:"creating-the-tpcds-catalog",children:"Creating the TPCDS Catalog"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:'CREATE CATALOG `tpcds` PROPERTIES (\n    "type" = "trino-connector",\n    "trino.connector.name" = "tpcds",\n    "trino.tpcds.split-count" = "32"\n);\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"trino.tpcds.split-count"})," property sets the level of concurrency. It is recommended to set it to twice the number of cores per BE node to achieve optimal concurrency and improve data generation efficiency."]}),"\n",(0,r.jsx)(t.h2,{id:"using-the-tpcds-catalog",children:"Using the TPCDS Catalog"}),"\n",(0,r.jsxs)(t.p,{children:["The TPCDS Catalog includes pre-configured TPCDS datasets of different scale factors, which can be viewed using the ",(0,r.jsx)(t.code,{children:"SHOW DATABASES"})," and ",(0,r.jsx)(t.code,{children:"SHOW TABLES"})," commands."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"mysql> SWITCH tpcds;\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| sf1                |\n| sf100              |\n| sf1000             |\n| sf10000            |\n| sf100000           |\n| sf300              |\n| sf3000             |\n| sf30000            |\n| tiny               |\n+--------------------+\n11 rows in set (0.00 sec)\n\nmysql> USE sf1;\nmysql> SHOW TABLES;\n+------------------------+\n| Tables_in_sf1          |\n+------------------------+\n| call_center            |\n| catalog_page           |\n| catalog_returns        |\n| catalog_sales          |\n| customer               |\n| customer_address       |\n| customer_demographics  |\n| date_dim               |\n| dbgen_version          |\n| household_demographics |\n| income_band            |\n| inventory              |\n| item                   |\n| promotion              |\n| reason                 |\n| ship_mode              |\n| store                  |\n| store_returns          |\n| store_sales            |\n| time_dim               |\n| warehouse              |\n| web_page               |\n| web_returns            |\n| web_sales              |\n| web_site               |\n+------------------------+\n25 rows in set (0.00 sec)\n"})}),"\n",(0,r.jsx)(t.p,{children:"You can directly query these tables using the SELECT statement."}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["The data in these pre-configured datasets is not actually stored but generated in real-time during queries. Therefore, these datasets are not suitable for direct benchmarking. They are more appropriate for writing to other target tables (such as Doris internal tables, Hive, Iceberg, and other data sources supported by Doris) via ",(0,r.jsx)(t.code,{children:"INSERT INTO SELECT"}),", after which performance tests can be conducted on the target tables."]})}),"\n",(0,r.jsx)(t.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(t.h4,{id:"quickly-build-tpcds-test-dataset",children:"Quickly Build TPCDS Test Dataset"}),"\n",(0,r.jsx)(t.p,{children:"You can quickly build a TPCDS test dataset using the CTAS (Create Table As Select) statement:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'CREATE TABLE hive.tpcds100.call_center            PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.call_center           ;\nCREATE TABLE hive.tpcds100.catalog_page           PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.catalog_page          ;\nCREATE TABLE hive.tpcds100.catalog_returns        PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.catalog_returns       ;\nCREATE TABLE hive.tpcds100.catalog_sales          PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.catalog_sales         ;\nCREATE TABLE hive.tpcds100.customer               PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.customer              ;\nCREATE TABLE hive.tpcds100.customer_address       PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.customer_address      ;\nCREATE TABLE hive.tpcds100.customer_demographics  PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.customer_demographics ;\nCREATE TABLE hive.tpcds100.date_dim               PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.date_dim              ;\nCREATE TABLE hive.tpcds100.dbgen_version          PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.dbgen_version         ;\nCREATE TABLE hive.tpcds100.household_demographics PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.household_demographics;\nCREATE TABLE hive.tpcds100.income_band            PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.income_band           ;\nCREATE TABLE hive.tpcds100.inventory              PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.inventory             ;\nCREATE TABLE hive.tpcds100.item                   PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.item                  ;\nCREATE TABLE hive.tpcds100.promotion              PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.promotion             ;\nCREATE TABLE hive.tpcds100.reason                 PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.reason                ;\nCREATE TABLE hive.tpcds100.ship_mode              PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.ship_mode             ;\nCREATE TABLE hive.tpcds100.store                  PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.store                 ;\nCREATE TABLE hive.tpcds100.store_returns          PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.store_returns         ;\nCREATE TABLE hive.tpcds100.store_sales            PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.store_sales           ;\nCREATE TABLE hive.tpcds100.time_dim               PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.time_dim              ;\nCREATE TABLE hive.tpcds100.warehouse              PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.warehouse             ;\nCREATE TABLE hive.tpcds100.web_page               PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.web_page              ;\nCREATE TABLE hive.tpcds100.web_returns            PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.web_returns           ;\nCREATE TABLE hive.tpcds100.web_sales              PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.web_sales             ;\nCREATE TABLE hive.tpcds100.web_site               PROPERTIES("file_format" = "parquet") AS SELECT * FROM tpcds.sf100.web_site              ;\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"On a Doris cluster with 3 BE nodes, each with 16 cores, creating a TPCDS 1000 dataset in Hive takes approximately 3 to 4 hours."})})]})}function p(e={}){let{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return a},a:function(){return o}});var s=n(667294);let r={},i=s.createContext(r);function o(e){let t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);