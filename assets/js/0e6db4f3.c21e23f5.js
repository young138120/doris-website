"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["434173"],{394834:function(e,t,n){n.r(t),n.d(t,{metadata:()=>a,contentTitle:()=>l,default:()=>u,assets:()=>c,toc:()=>i,frontMatter:()=>o});var a=JSON.parse('{"id":"admin-manual/data-admin/ccr/quickstart","title":"QuickStart","description":"\x3c!--","source":"@site/docs/admin-manual/data-admin/ccr/quickstart.md","sourceDirName":"admin-manual/data-admin/ccr","slug":"/admin-manual/data-admin/ccr/quickstart","permalink":"/docs/dev/admin-manual/data-admin/ccr/quickstart","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"QuickStart","language":"en"},"sidebar":"docs","previous":{"title":"Overview","permalink":"/docs/dev/admin-manual/data-admin/ccr/overview"},"next":{"title":"Feature Details","permalink":"/docs/dev/admin-manual/data-admin/ccr/feature"}}'),r=n("785893"),s=n("250065");let o={title:"QuickStart",language:"en"},l=void 0,c={},i=[{value:"Step 1. Deploy the source Doris cluster",id:"step-1-deploy-the-source-doris-cluster",level:2},{value:"Step 2. Deploy the target Doris cluster",id:"step-2-deploy-the-target-doris-cluster",level:2},{value:"Step 3. Enable binlog in both the source and target clusters",id:"step-3-enable-binlog-in-both-the-source-and-target-clusters",level:2},{value:"Step 4. Deploy Syncer",id:"step-4-deploy-syncer",level:2},{value:"Step 5. Enable binlog in the source db or table",id:"step-5-enable-binlog-in-the-source-db-or-table",level:2},{value:"Step 6. Launch a synchronization task to the Syncer",id:"step-6-launch-a-synchronization-task-to-the-syncer",level:2}];function d(e){let t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"The usage of CCR is straightforward. Simply start the syncer service and send a command, and the Syncer will take care of the rest."}),"\n",(0,r.jsx)(t.h2,{id:"step-1-deploy-the-source-doris-cluster",children:"Step 1. Deploy the source Doris cluster"}),"\n",(0,r.jsx)(t.h2,{id:"step-2-deploy-the-target-doris-cluster",children:"Step 2. Deploy the target Doris cluster"}),"\n",(0,r.jsx)(t.h2,{id:"step-3-enable-binlog-in-both-the-source-and-target-clusters",children:"Step 3. Enable binlog in both the source and target clusters"}),"\n",(0,r.jsx)(t.p,{children:"Both the source and target clusters need to enable binlog. Configure the following information in the fe.conf and be.conf files of the source and target clusters:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-SQL",children:"enable_feature_binlog=true\n"})}),"\n",(0,r.jsx)(t.h2,{id:"step-4-deploy-syncer",children:"Step 4. Deploy Syncer"}),"\n",(0,r.jsx)(t.p,{children:"\u200BBuild CCR Syncer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/selectdb/ccr-syncer\ncd ccr-syncer   \nbash build.sh <-j NUM_OF_THREAD> <--output SYNCER_OUTPUT_DIR>\ncd SYNCER_OUTPUT_DIR# Contact the Doris community for a free CCR binary package\n"})}),"\n",(0,r.jsx)(t.p,{children:"Start and stop Syncer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"# Start\ncd bin && sh start_syncer.sh --daemon\n\n# Stop\nsh stop_syncer.sh\n"})}),"\n",(0,r.jsx)(t.h2,{id:"step-5-enable-binlog-in-the-source-db-or-table",children:"Step 5. Enable binlog in the source db or table"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:'-- If you want to synchronize the entire database, you can execute the following script:\nvim shell/enable_db_binlog.sh\nModify host, port, user, password, and db in the source cluster\nOr ./enable_db_binlog.sh --host $host --port $port --user $user --password $password --db $db\n\n-- If you want to synchronize a single table, you can execute the following script and enable binlog for the target table:\nALTER TABLE enable_binlog SET ("binlog.enable" = "true");\n'})}),"\n",(0,r.jsx)(t.h2,{id:"step-6-launch-a-synchronization-task-to-the-syncer",children:"Step 6. Launch a synchronization task to the Syncer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:'curl -X POST -H "Content-Type: application/json" -d \'{\n    "name": "ccr_test",\n    "src": {\n      "host": "localhost",\n      "port": "9030",\n      "thrift_port": "9020",\n      "user": "root",\n      "password": "",\n      "database": "your_db_name",\n      "table": "your_table_name"\n    },\n    "dest": {\n      "host": "localhost",\n      "port": "9030",\n      "thrift_port": "9020",\n      "user": "root",\n      "password": "",\n      "database": "your_db_name",\n      "table": "your_table_name"\n    }\n}\' http://127.0.0.1:9190/create_ccr\n'})}),"\n",(0,r.jsx)(t.p,{children:"Parameter description:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"name: name of the CCR synchronization task, should be unique\nhost, port: host and mysql(jdbc) port for the master FE for the corresponding cluster\nuser, password: the credentials used by the Syncer to initiate transactions, fetch data, etc.\nIf it is synchronization at the database level, specify your_db_name and leave your_table_name empty\nIf it is synchronization at the table level, specify both your_db_name and your_table_name\nThe synchronization task name can only be used once.\n"})})]})}function u(e={}){let{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},250065:function(e,t,n){n.d(t,{Z:function(){return l},a:function(){return o}});var a=n(667294);let r={},s=a.createContext(r);function o(e){let t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);